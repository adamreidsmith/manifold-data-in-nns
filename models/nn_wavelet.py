#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun 21 13:54:11 2019

@author: adamreidsmith
"""

'''
Standard feed forward network for perdicting parameters a and b from the extrema
of the wavelet transform of a solution of the Van der Pol equation.  Performs 
poorly.

Datafiles for this network can be generated by running 'vdp_data.py'.
'''

#Path of the datafile created by 'vdp_data.py'.
file_path = './datafiles/vdp_data_800pts_[soln,FT,hist,phase(True),param].npy'

from os import path
assert path.exists(file_path), 'Datafile not found. Please run \'vdp_data.py\' \
                               to generate a datafile.'
import torch
import numpy as np
from torch import nn
from torch.utils.data import Dataset, DataLoader, random_split
import matplotlib.pyplot as plt
import wavelet_analysis as wa

###############################################################################
'''
Inputs:
    n_epochs:           Number of epochs to train for.
    
    batch_size:         Batch size.
    
    lr:                 Learning Rate.
    
    weight_decay:       Weight decay factor.
    
    lr_factor:          Learning rate decay factor.  Learning rate is multiplied 
                            by this factor every epoch.
                            
    loss_function:      Loss function. Can be:
                            'mean square':   loss = sum((x_i - y_i)^2)
                            'log cosh':      loss = sum(log(cosh(x_i - y_i)))
                            
    scale_params:       List of length 2 giving minimum and maximum values of 
                            the scale parameter used in the wavelet transform.
    
    n_scale_points:     Number of scale points to use in wavelet transform.
    
    wavelet_name:       String giving the name of the wavelet.
    
    num_peaks:          Number of peaks in the wavelet transform to train on.
    
    min_dist:           Minimum distance between peaks in the wavelet transform.
'''
###############################################################################

def main(n_epochs=70,
         batch_size=10,
         lr=0.001,
         weight_decay=1e-8,
         lr_factor=0.95,
         loss_function='log cosh',
         scale_params=[1.66,130],
         n_scale_points=100,
         wavelet_name='morl',
         num_peaks=130,
         min_dist=3):
    
    class Data(Dataset):
        
        def __init__(self):
            print('\nLoading data...')
            self.data = np.load(file_path)

            dlen = len(self.data)
            
            #Parameters used in solution of Van der Pol oscillator
            self.parameters = torch.Tensor([self.data[i] for i in range(dlen) if (i+1) % 5 == 0])
                        
            #Phase phi included in the forcing function cos(wt+phi)
            self.phase = np.array([[self.data[i]] for i in range(dlen) if (i+2) % 5 == 0])
            
            #Tensor of x values in the solution of the Van der Pol equation
            self.soln = torch.Tensor([self.data[i] for i in range(dlen) if i % 5 == 0])
            self.soln = torch.Tensor([[self.soln[i][j][1] for j in range(len(self.soln[0]))] for i in range(len(self.soln))])
            
            #Time points at which the Van dar Pol equation was evaluated.
            self.time = [self.data[i] for i in range(dlen) if i % 5 == 0]
            self.time = [self.time[0][i][0] for i in range(len(self.time[0]))]

            self.len = self.parameters.shape[0]
            
            print('\nComputing wavelet transforms...')
            
            #Wavelet transform of the data
            self.wavelet_transform_coefs = []
            for i in range(self.len):
                coefs, freqs = wa.wavelet_transform(self.soln[i],
                                                    self.time,
                                                    wavelet_name=wavelet_name,
                                                    scale_min=scale_params[0],
                                                    scale_max=scale_params[1],
                                                    n_scale_pts=n_scale_points)
                self.wavelet_transform_coefs.append(coefs)
                if i == 0:
                    self.wavelet_transfrom_freqs = torch.Tensor(freqs)
                if i % 100 == 0:
                    print('Iteration: %i of %i' % (i,self.len))
            
            self.wavelet_transform_coefs = torch.Tensor(self.wavelet_transform_coefs)
                        
            print('\nComputing wavelet transform local maxima...')
            
            #Local maxima of the wavelet transforms
            self.num_maxima_peaks = num_peaks
            self.wt_time_maxima, self.wt_freq_maxima, self.wt_value_maxima = [], [], []
            for i in range(self.len):
                indices, maxima, time, freq = wa.wavelet_transform_maxima([self.wavelet_transform_coefs[i], freqs],
                                                                          self.time,
                                                                          min_distance=min_dist,
                                                                          num_peaks=self.num_maxima_peaks)
                assert len(indices) == self.num_maxima_peaks, \
                       'Only %i (not %i) maxima found for wavelet transform %i. \
                       Try reducing \'num_maxima_peaks\' or \'min_dist\'.' \
                       % (len(indices), self.num_maxima_peaks, i)
                self.wt_time_maxima.append(time)
                self.wt_freq_maxima.append(freq)
                self.wt_value_maxima.append(maxima)   
                
            self.wt_time_maxima = torch.Tensor(self.wt_time_maxima)
            self.wt_freq_maxima = torch.Tensor(self.wt_freq_maxima)
            self.wt_value_maxima = torch.Tensor(self.wt_value_maxima)
            
            self.wt_maxima = torch.cat([self.wt_value_maxima, self.wt_time_maxima, self.wt_freq_maxima], 1)
                        
        def __getitem__(self, index):            
            return [self.wt_maxima[index], self.phase[index]], self.parameters[index]
        
        __len__ = lambda self: self.len
                       
    
    dataset = Data()
    
    # Lengths of the training and validation datasets
    train_len = int(0.75*dataset.len)
    valid_len = dataset.len - train_len
        
    #Randomly split the data into training and validation datasets
    train_data, valid_data = random_split(dataset, (train_len, valid_len))
        
    train_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)
    valid_loader = DataLoader(dataset=valid_data, batch_size=batch_size, shuffle=True)        
    
    #Model of the neural network
    class Model(nn.Module):
        
        def __init__(self):
            super(Model, self).__init__()
            
            n_inputs = 3*dataset.num_maxima_peaks + len(dataset.phase[0][0])
    
            #Fully connected linear layers: [self.in_f](dropout) -> [500](dropout) -> [50](dropout) -> [2]
            #self.dropout1 = nn.Dropout(p=0.4)
            self.fc1 = nn.Linear(in_features=n_inputs, out_features=500)
            self.dropout2 = nn.Dropout(p=0.2)
            self.fc2 = nn.Linear(in_features=500, out_features=50)
            self.dropout3 = nn.Dropout(p=0.1)
            self.fc3 = nn.Linear(in_features=50, out_features=2)
            
        def forward(self, x, phi):
            
            #Include the phase in the training of the fully connected linear layers
            x = torch.cat((x,phi.flatten(1).type(torch.float)),1)
            
            #Linear layers wih dropout
            #x = self.dropout1(x)
            x = torch.sigmoid(self.fc1(x))
            x = self.dropout2(x)
            x = torch.sigmoid(self.fc2(x))
            x = self.dropout3(x)
            return self.fc3(x)
        
        
    model = Model()
    
    if loss_function == 'mean square':
        loss_func = nn.MSELoss()
    elif loss_function == 'log cosh':
        loss_func = lambda x, y: torch.log(torch.cosh(2*(x - y))).sum()
    else:
        raise RuntimeError('loss_function not recognized. \
                           Set loss_function to \'mean square\' or \'log cosh\'')    
    
    #Optimizer
    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)
    scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma=lr_factor)
    
    def evaluate():
        #Evaluation mode
        model.eval()
        for data in valid_loader:
    
            #Split batch into inputs and outputs
            x, phi, y = data[0][0], data[0][1], data[1].squeeze()
            
            #Forward propagation
            out = model(x, phi)
            
            #Loss computation
            loss = loss_func(out, y)
            
            #Save training loss in this batch
            valid_loss.append(loss.item())
            
            #Compute the average percent error over a validation batch
            percent_error = 100*torch.div(abs(out - y), y)
            all_percent_error.extend(percent_error.flatten().squeeze(0).tolist())
            median_percent_error.append(np.median(percent_error.detach().numpy()))
        
        return valid_loss
        
    def train():
        #Training mode
        model.train()
        for data in train_loader:
            
            #Split batch into inputs and outputs
            x, phi, y = data[0][0], data[0][1], data[1].squeeze()
                        
            def closure():
                #Reset gradients to zero
                optimizer.zero_grad()
                
                #Forward propagation
                out = model(x, phi)
                        
                #Loss computation
                loss = loss_func(out, y)
                
                #Backpropagation
                loss.backward()
                
                return loss
            
            #Weight optimiation
            optimizer.step(closure)
            
            #Save training loss in this batch
            train_loss.append(closure().item())
            
        return train_loss
    
    def plot_hist():
        #Plot histograms of the error (Predicted - True) in the predicted data
        error = []    
        model.eval()
        for data in valid_loader:
            #Split batch into inputs and outputs
            x, phi, y = data[0][0], data[0][1], data[1].squeeze()
            out = model(x, phi)
            error.append((out - y).detach().numpy())
        
        error = np.array(error)
        a_error = np.array([error[i][j][0] for i in range(len(error)) for j in range(batch_size)])
        b_error = np.array([error[i][j][1] for i in range(len(error)) for j in range(batch_size)])
        
        plt.figure(figsize=(8,6))
        plt.hist(a_error, bins=30, color='b')
        plt.title('Prediction error in parameter \'a\' in validation data')
        plt.xlabel('Predicted - True')
        plt.figure(figsize=(8,6))
        plt.hist(b_error, bins=30, color='k')
        plt.title('Prediction error in parameter \'b\' in validation data')
        plt.xlabel('Predicted - True')
        
        plt.figure(figsize=(8,6))
        p_err_less_100 = [i for i in all_percent_error if i <= 100]
        n_more_100 = len(all_percent_error) - len(p_err_less_100)  
        plt.hist(p_err_less_100, bins=30)
        plt.text(x=plt.xlim()[1]-35, y=plt.ylim()[1]-10, s='More than 100% error:\n'+str(n_more_100))
        plt.xlabel('Percent Error')
        plt.title('Histogram of percent errors in predictions of validation data')
        
        plt.show()
    
    #Print statistics about the current run
    print('\nModel Information:\n', model, sep='')
    print('\nRun Start', 
          '\n  Batch size:', batch_size, 
          '\n  Epochs:',  n_epochs,
          '\n  Training data size:', len(train_loader)*batch_size,
          '\n  Validation data size:', len(valid_loader)*batch_size,
          '\n  Learning rate:', lr,
          '\n  LR decay factor:', lr_factor,
          '\n  Weight decay:', weight_decay,
          '\n  Loss function:', loss_function,
          '\n  Optimizer:', repr(optimizer).partition('(')[0],
          '\n  LR scheduler:', repr(scheduler)[repr(scheduler).find('er.')+3:repr(scheduler).find(' obj')],
          '\n')
    
    #Training and evaluation loop
    for epoch in range(n_epochs): #An epoch is a run of the entire training dataset
    
        train_loss, valid_loss, median_percent_error, all_percent_error = [], [], [], []
        
        #Train the network
        train_loss = train()

        #Evaluate the network
        valid_loss = evaluate()
        
        print('Epoch:', epoch+1,
              '\n  Learning rate:             ', scheduler.get_lr()[0],
              '\n  Mean epoch training loss:  ', np.mean(train_loss),
              '\n  Mean epoch validation loss:', np.mean(valid_loss),
              '\n  Overfitting factor:        ', np.mean(valid_loss)/np.mean(train_loss),
              '\n  Median percent error:      ', np.median(np.array(median_percent_error)), '%')
        
        #Update the learing rate
        scheduler.step()
        
    plot_hist()


main()


















